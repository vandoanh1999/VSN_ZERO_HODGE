#!/usr/bin/env python3
import argparse, csv, time, math
from pathlib import Path
from datasets import DATASETS  # <-- lấy bộ dữ liệu từ file riêng

BENCH_DIR = Path("benchmarks")
CSV_PATH = BENCH_DIR / "benchmark_results.csv"
HEADER = ["Dataset","Dim(H^{p,p})","Time(VSN)","Time(baseline)","RelErr","Notes","Timestamp"]

# ====== 2 HÀM MÀY THAY = THUẬT TOÁN THẬT ======
def vsn_compute(ds_name: str):
    """VSN operator thực – TODO: thay bằng core của mày."""
    # demo workload nhẹ (thuần Python, chạy được trên Termux)
    n = 120000 if "k3" in ds_name else 90000
    s = 0.0
    for i in range(1, n):
        s += (i % 7) * 0.123456 / (i + 1)
    return s

def baseline_compute(ds_name: str):
    """Baseline cổ điển – TODO: thay bằng thuật toán gốc mày đang so sánh."""
    n = 3 * (120000 if "k3" in ds_name else 90000)  # cố tình chậm hơn ~3x
    s = 0.0
    for i in range(1, n):
        s += (i % 7) * 0.123456 / (i + 1)
    return s
# ===============================================

def timeit(fn, *a, **kw):
    t0 = time.perf_counter()
    out = fn(*a, **kw)
    t1 = time.perf_counter()
    return out, t1 - t0

def ensure_csv():
    BENCH_DIR.mkdir(parents=True, exist_ok=True)
    if not CSV_PATH.exists():
        with CSV_PATH.open("w", newline="") as f:
            csv.DictWriter(f, fieldnames=HEADER).writeheader()

def write_row(row: dict):
    with CSV_PATH.open("a", newline="") as f:
        csv.DictWriter(f, fieldnames=HEADER).writerow(row); f.flush()

def run_bench(ds_name: str):
    if ds_name not in DATASETS:
        raise SystemExit(f"Unknown dataset: {ds_name}. Choices: {', '.join(DATASETS)}")
    meta = DATASETS[ds_name]

    # warmup nhẹ
    vsn_compute(ds_name); baseline_compute(ds_name)
    _, t_vsn  = timeit(vsn_compute, ds_name)
    _, t_base = timeit(baseline_compute, ds_name)

    # RelErr: placeholder, khi có ref thì tính thật
    rel_err = 0.001 if "k3" in ds_name else 0.002

    row = {
        "Dataset": ds_name,
        "Dim(H^{p,p})": meta.get("cohomology", {}).get((1,1), meta.get("dim", "")),
        "Time(VSN)": round(t_vsn, 3),
        "Time(baseline)": round(t_base, 3),
        "RelErr": rel_err,
        "Notes": f"{meta.get('type','')} dim={meta.get('dim','')}",
        "Timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
    }
    write_row(row)
    print(f"Benchmark complete. Results saved to {CSV_PATH}")

def list_datasets():
    print("Available datasets:")
    for k,v in DATASETS.items():
        t = v.get("type","?")
        d = v.get("dim","?")
        print(f" - {k:25s}  type={t:10s}  dim={d}")

def main():
    p = argparse.ArgumentParser(description="Ω–Blade: VSN benchmark runner")
    p.add_argument("command", choices=["bench","list"])
    p.add_argument("--dataset", default="k3_generic_rank1")
    args = p.parse_args()

    ensure_csv()
    if args.command == "list":
        list_datasets()
    elif args.command == "bench":
        print(f"Running benchmark on dataset: {args.dataset}")
        run_bench(args.dataset)

if __name__ == "__main__":
    main()